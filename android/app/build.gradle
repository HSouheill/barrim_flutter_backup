import java.util.Properties
import java.io.FileInputStream

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id 'dev.flutter.flutter-gradle-plugin'
    id 'com.google.gms.google-services' // Add the Google services plugin
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

dependencies {
    // Import the Firebase BoM (Bill of Materials) for consistent versioning
    implementation platform('com.google.firebase:firebase-bom:33.10.0')

    // Firebase authentication and Google Sign-In SDK
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore' // Optional, for Firestore if needed
    // Google Sign-In SDK
    implementation 'com.google.android.gms:play-services-auth:20.3.0'
    implementation 'com.google.firebase:firebase-messaging'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'
}

android {
    namespace 'com.Dev.DevBarrim'
    compileSdk 36
    ndkVersion '27.0.12077973'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    buildFeatures {
        // Enable desugaring through this method
        buildConfig true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId 'com.Dev.DevBarrim'
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdkVersion flutter.minSdkVersion
        targetSdk 36
        versionCode 2
        versionName '1.0.1'
        multiDexEnabled true
    }

    signingConfigs {
        if (keystorePropertiesFile.exists()) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // Use release signing config if available, otherwise fall back to debug
            signingConfig keystorePropertiesFile.exists() ? signingConfigs.release : signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}
